{"name": "test_Third_Register_Bind[myfixture0]", "status": "broken", "statusDetails": {"message": "pymysql.err.InterfaceError: (0, '')", "trace": "self = <utils.pysql.PyMySQL object at 0x00000000055450B8>\ntable = 'customer_verify_sms'\ndata = {'creation_date': datetime.datetime(2021, 4, 26, 18, 29, 2, 184191), 'cust_id': 0, 'verify_code': '320110', 'verify_mobile': '13311111131', ...}\n\n    def mysqlinsert(self, table,data):\n        '''\n    \n        :param table: 插入表\n        :param data: 插入数据（字段和值组成的字典）\n        :return:\n        '''\n    \n        sql=\" insert into \"+ table+\" \"\n    \n        column=''\n        column_value=''\n        for key,value in data.items():\n            column+=key+\",\"\n            if isinstance(value, str):\n                column_value += \"'\" + str(value) + \"'\"+\",\"\n            else:\n                column_value += str(value)+\",\"\n    \n        sql=sql+\"(\"+column.strip(',')+\") values (\"+column_value.strip(',')+\")\"\n    \n        try:\n            cursor = self.conn.cursor()\n>           cursor.execute(sql)\n\nutils\\pysql.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.cursors.Cursor object at 0x00000000055451D0>\nquery = \" insert into customer_verify_sms (cust_id,verify_mobile,verify_type,verify_code,verify_send_date,verify_timeout_date,...values (0,'13311111131',9,'320110',2021-04-26 18:29:02.184191,2021-04-27 18:29:02.184191,0,2021-04-26 18:29:02.184191)\"\nargs = None\n\n    def execute(self, query, args=None):\n        \"\"\"Execute a query\n    \n        :param str query: Query to execute.\n    \n        :param args: parameters used with query. (optional)\n        :type args: tuple, list or dict\n    \n        :return: Number of affected rows\n        :rtype: int\n    \n        If args is a list or tuple, %s can be used as a placeholder in the query.\n        If args is a dict, %(name)s can be used as a placeholder in the query.\n        \"\"\"\n        while self.nextset():\n            pass\n    \n        query = self.mogrify(query, args)\n    \n>       result = self._query(query)\n\nvenv\\lib\\site-packages\\pymysql\\cursors.py:170: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.cursors.Cursor object at 0x00000000055451D0>\nq = \" insert into customer_verify_sms (cust_id,verify_mobile,verify_type,verify_code,verify_send_date,verify_timeout_date,...values (0,'13311111131',9,'320110',2021-04-26 18:29:02.184191,2021-04-27 18:29:02.184191,0,2021-04-26 18:29:02.184191)\"\n\n    def _query(self, q):\n        conn = self._get_db()\n        self._last_executed = q\n        self._clear_result()\n>       conn.query(q)\n\nvenv\\lib\\site-packages\\pymysql\\cursors.py:328: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.connections.Connection object at 0x0000000004C19668>\nsql = b\" insert into customer_verify_sms (cust_id,verify_mobile,verify_type,verify_code,verify_send_date,verify_timeout_date...values (0,'13311111131',9,'320110',2021-04-26 18:29:02.184191,2021-04-27 18:29:02.184191,0,2021-04-26 18:29:02.184191)\"\nunbuffered = False\n\n    def query(self, sql, unbuffered=False):\n        # if DEBUG:\n        #     print(\"DEBUG: sending query:\", sql)\n        if isinstance(sql, text_type) and not (JYTHON or IRONPYTHON):\n            if PY2:\n                sql = sql.encode(self.encoding)\n            else:\n                sql = sql.encode(self.encoding, 'surrogateescape')\n>       self._execute_command(COMMAND.COM_QUERY, sql)\n\nvenv\\lib\\site-packages\\pymysql\\connections.py:516: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.connections.Connection object at 0x0000000004C19668>\ncommand = 3\nsql = b\" insert into customer_verify_sms (cust_id,verify_mobile,verify_type,verify_code,verify_send_date,verify_timeout_date...values (0,'13311111131',9,'320110',2021-04-26 18:29:02.184191,2021-04-27 18:29:02.184191,0,2021-04-26 18:29:02.184191)\"\n\n    def _execute_command(self, command, sql):\n        \"\"\"\n        :raise InterfaceError: If the connection is closed.\n        :raise ValueError: If no username was specified.\n        \"\"\"\n        if not self._sock:\n>           raise err.InterfaceError(\"(0, '')\")\nE           pymysql.err.InterfaceError: (0, '')\n\nvenv\\lib\\site-packages\\pymysql\\connections.py:750: InterfaceError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <utils.pysql.PyMySQL object at 0x00000000055450B8>\ntable = 'customer_verify_sms'\ndata = {'creation_date': datetime.datetime(2021, 4, 26, 18, 29, 2, 184191), 'cust_id': 0, 'verify_code': '320110', 'verify_mobile': '13311111131', ...}\n\n    def mysqlinsert(self, table,data):\n        '''\n    \n        :param table: 插入表\n        :param data: 插入数据（字段和值组成的字典）\n        :return:\n        '''\n    \n        sql=\" insert into \"+ table+\" \"\n    \n        column=''\n        column_value=''\n        for key,value in data.items():\n            column+=key+\",\"\n            if isinstance(value, str):\n                column_value += \"'\" + str(value) + \"'\"+\",\"\n            else:\n                column_value += str(value)+\",\"\n    \n        sql=sql+\"(\"+column.strip(',')+\") values (\"+column_value.strip(',')+\")\"\n    \n        try:\n            cursor = self.conn.cursor()\n            cursor.execute(sql)\n        except:\n            self.conn.ping()  # 超时重连，默认300s\n            cursor = self.conn.cursor()\n>           cursor.execute(sql)\n\nutils\\pysql.py:125: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.cursors.Cursor object at 0x0000000005545518>\nquery = \" insert into customer_verify_sms (cust_id,verify_mobile,verify_type,verify_code,verify_send_date,verify_timeout_date,...values (0,'13311111131',9,'320110',2021-04-26 18:29:02.184191,2021-04-27 18:29:02.184191,0,2021-04-26 18:29:02.184191)\"\nargs = None\n\n    def execute(self, query, args=None):\n        \"\"\"Execute a query\n    \n        :param str query: Query to execute.\n    \n        :param args: parameters used with query. (optional)\n        :type args: tuple, list or dict\n    \n        :return: Number of affected rows\n        :rtype: int\n    \n        If args is a list or tuple, %s can be used as a placeholder in the query.\n        If args is a dict, %(name)s can be used as a placeholder in the query.\n        \"\"\"\n        while self.nextset():\n            pass\n    \n        query = self.mogrify(query, args)\n    \n>       result = self._query(query)\n\nvenv\\lib\\site-packages\\pymysql\\cursors.py:170: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.cursors.Cursor object at 0x0000000005545518>\nq = \" insert into customer_verify_sms (cust_id,verify_mobile,verify_type,verify_code,verify_send_date,verify_timeout_date,...values (0,'13311111131',9,'320110',2021-04-26 18:29:02.184191,2021-04-27 18:29:02.184191,0,2021-04-26 18:29:02.184191)\"\n\n    def _query(self, q):\n        conn = self._get_db()\n        self._last_executed = q\n        self._clear_result()\n>       conn.query(q)\n\nvenv\\lib\\site-packages\\pymysql\\cursors.py:328: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.connections.Connection object at 0x0000000004C19668>\nsql = b\" insert into customer_verify_sms (cust_id,verify_mobile,verify_type,verify_code,verify_send_date,verify_timeout_date...values (0,'13311111131',9,'320110',2021-04-26 18:29:02.184191,2021-04-27 18:29:02.184191,0,2021-04-26 18:29:02.184191)\"\nunbuffered = False\n\n    def query(self, sql, unbuffered=False):\n        # if DEBUG:\n        #     print(\"DEBUG: sending query:\", sql)\n        if isinstance(sql, text_type) and not (JYTHON or IRONPYTHON):\n            if PY2:\n                sql = sql.encode(self.encoding)\n            else:\n                sql = sql.encode(self.encoding, 'surrogateescape')\n        self._execute_command(COMMAND.COM_QUERY, sql)\n>       self._affected_rows = self._read_query_result(unbuffered=unbuffered)\n\nvenv\\lib\\site-packages\\pymysql\\connections.py:517: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.connections.Connection object at 0x0000000004C19668>\nunbuffered = False\n\n    def _read_query_result(self, unbuffered=False):\n        self._result = None\n        if unbuffered:\n            try:\n                result = MySQLResult(self)\n                result.init_unbuffered_query()\n            except:\n                result.unbuffered_active = False\n                result.connection = None\n                raise\n        else:\n            result = MySQLResult(self)\n>           result.read()\n\nvenv\\lib\\site-packages\\pymysql\\connections.py:732: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.connections.MySQLResult object at 0x0000000005545080>\n\n    def read(self):\n        try:\n>           first_packet = self.connection._read_packet()\n\nvenv\\lib\\site-packages\\pymysql\\connections.py:1075: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.connections.Connection object at 0x0000000004C19668>\npacket_type = <class 'pymysql.protocol.MysqlPacket'>\n\n    def _read_packet(self, packet_type=MysqlPacket):\n        \"\"\"Read an entire \"mysql packet\" in its entirety from the network\n        and return a MysqlPacket type that represents the results.\n    \n        :raise OperationalError: If the connection to the MySQL server is lost.\n        :raise InternalError: If the packet sequence number is wrong.\n        \"\"\"\n        buff = b''\n        while True:\n>           packet_header = self._read_bytes(4)\n\nvenv\\lib\\site-packages\\pymysql\\connections.py:657: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.connections.Connection object at 0x0000000004C19668>\nnum_bytes = 4\n\n    def _read_bytes(self, num_bytes):\n        self._sock.settimeout(self._read_timeout)\n        while True:\n            try:\n                data = self._rfile.read(num_bytes)\n                break\n            except (IOError, OSError) as e:\n                if e.errno == errno.EINTR:\n                    continue\n                self._force_close()\n                raise err.OperationalError(\n                    CR.CR_SERVER_LOST,\n                    \"Lost connection to MySQL server during query (%s)\" % (e,))\n            except BaseException:\n                # Don't convert unknown exception to MySQLError.\n                self._force_close()\n                raise\n        if len(data) < num_bytes:\n            self._force_close()\n            raise err.OperationalError(\n>               CR.CR_SERVER_LOST, \"Lost connection to MySQL server during query\")\nE           pymysql.err.OperationalError: (2013, 'Lost connection to MySQL server during query')\n\nvenv\\lib\\site-packages\\pymysql\\connections.py:707: OperationalError\n\nDuring handling of the above exception, another exception occurred:\n\n    def setup_module():\n    \n        #初始化，向customer_verify_sms插入二条数据，\n    \n        #1、mobile在库已绑定，\n        sql = \"select cust_mobile from customer where cust_id in (select cust_id from customer_third \" \\\n              \"where third_id=1105 and cust_status!=-1) and cust_mobile!='' limit 1\"\n    \n        mobile_indb = PyMySQL().mysqlget(sql)\n        Third_Register_Bind.mobile_indb=mobile_indb\n    \n        mobile_not_indb=Third_Register_Bind.initparams['mobile']\n    \n        vcode = Third_Register_Bind.initparams['vcode']\n    \n        s_date = datetime.datetime.now()\n        e_date=s_date+datetime.timedelta(days = 1)\n    \n    \n        for mobile in [mobile_indb,mobile_not_indb]:\n            # sql=\"insert into customer_verify_sms(cust_id,verify_mobile,verify_type,verify_code,verify_send_date,\" \\\n            #     \"verify_date,verify_timeout_date,verify_status,creation_date) \"\\\n            #           \"values({},{},{},{},{},{},{},{},{});\".format(0,'\"'+str(mobile)+ '\"',9,'\"'+str(vcode)+ '\"', '\"'+str(now)+ '\"',\n            #                                                        '\"'+str(now)+ '\"','\"'+str(now_2)+'\"',0,'\"'+str(now)+'\"')\n            insert_data = {\n                'cust_id': 0,\n                'verify_mobile': mobile,\n                'verify_type': 9,\n                'verify_code': vcode,\n                'verify_send_date': s_date,\n                'verify_timeout_date': e_date,\n                'verify_status': 0,\n                'creation_date': s_date\n            }\n    \n>           PyMySQL().mysqlinsert('customer_verify_sms',insert_data)\n\ntestcase\\Loginapi\\third_register_bind_test.py:157: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\pysql.py:127: in mysqlinsert\n    self.conn.commit()\nvenv\\lib\\site-packages\\pymysql\\connections.py:419: in commit\n    self._execute_command(COMMAND.COM_QUERY, \"COMMIT\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.connections.Connection object at 0x0000000004C19668>\ncommand = 3, sql = 'COMMIT'\n\n    def _execute_command(self, command, sql):\n        \"\"\"\n        :raise InterfaceError: If the connection is closed.\n        :raise ValueError: If no username was specified.\n        \"\"\"\n        if not self._sock:\n>           raise err.InterfaceError(\"(0, '')\")\nE           pymysql.err.InterfaceError: (0, '')\n\nvenv\\lib\\site-packages\\pymysql\\connections.py:750: InterfaceError"}, "parameters": [{"name": "myfixture", "value": "({'mobile': 19911343411, 'cust_third_id': '', 'vcode': '320110', 'clientIP': '192.168.20.59', 'appkey': 1030}, ('1', '参数格式不正确'))"}], "start": 1619432941944, "stop": 1619432941944, "uuid": "935221b6-bcc9-4245-87eb-7b5968deaebf", "historyId": "ede77a2a9d236ca1898614ceeac608a8", "testCaseId": "f29809f69e71a5b46e584513f13923ca", "fullName": "testcase.Loginapi.third_register_bind_test#test_Third_Register_Bind", "labels": [{"name": "tag", "value": "third_register_bind"}, {"name": "tag", "value": "flaky(reruns=1, reruns_delay=10)"}, {"name": "parentSuite", "value": "testcase.Loginapi"}, {"name": "suite", "value": "third_register_bind_test"}, {"name": "host", "value": "A06P-A90F12DAA"}, {"name": "thread", "value": "4544-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.Loginapi.third_register_bind_test"}]}