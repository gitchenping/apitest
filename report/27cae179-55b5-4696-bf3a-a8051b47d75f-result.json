{"name": "必须输入的字段为空或者输入的参数格式不正确", "status": "broken", "statusDetails": {"message": "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "pyfixture = ({'appkey': None, 'autokey': None, 'client_version': '10.7.0', 'ip_address': '192.168.90.99', ...}, ('1', '必须输入的字段为空或者输入的参数格式不正确'))\n\n    @allure.title('{pyfixture[1][1]}')\n    @pytest.mark.login_sms\n    @pytest.mark.flaky(reruns=1,reruns_delay=10)\n    def test_LoginSms(pyfixture):\n    \n        #请求\n        url=LoingSms.url\n        data=pyfixture[0]\n>       res=request(url=url,data=data)\n\ntestcase\\Loginapi\\Login_Sms_test.py:132: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\requesttool.py:20: in request\n    res_dict=json.loads(res.text)\nD:\\Program Files (x86)\\python3.6\\lib\\json\\__init__.py:354: in loads\n    return _default_decoder.decode(s)\nD:\\Program Files (x86)\\python3.6\\lib\\json\\decoder.py:339: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x0000000003641128>\ns = '<resultObject>\\n  <errorCode><![CDATA[1]]></errorCode>\\n  <statusCode><![CDATA[1]]></statusCode>\\n</resultObject>'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nD:\\Program Files (x86)\\python3.6\\lib\\json\\decoder.py:357: JSONDecodeError"}, "parameters": [{"name": "pyfixture", "value": "({'mobile_phone': '', 'vcode': 123456, 'appkey': None, 'ip_address': '192.168.90.99', 'watchdog_flg': 1, 'permanent_id': 23243242341241231212, 'trace_id': 3234234242342132, 'source_url': 'http://www.ui.com', 'udid': 'abc29088809812121', 'client_version': '10.7.0', 'autokey': None, 'json_info': None, 'tongdun_deviceid': None, 'shumei_deviceid': None}, ('1', '必须输入的字段为空或者输入的参数格式不正确'))"}], "start": 1595487219664, "stop": 1595487219679, "uuid": "aad0bf70-3b08-4019-8eab-5bef9540d0b2", "historyId": "f0c10093c7335b0314c252e8f24422ad", "testCaseId": "3b771a89a9d875ddc678304aa7d66743", "fullName": "testcase.Loginapi.Login_Sms_test#test_LoginSms", "labels": [{"name": "tag", "value": "flaky(reruns=1, reruns_delay=10)"}, {"name": "tag", "value": "login_sms"}, {"name": "parentSuite", "value": "testcase.Loginapi"}, {"name": "suite", "value": "Login_Sms_test"}, {"name": "host", "value": "A06P-A90F12DAA"}, {"name": "thread", "value": "6176-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.Loginapi.Login_Sms_test"}]}