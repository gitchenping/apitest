{"name": "成功", "status": "broken", "statusDetails": {"message": "pymysql.err.InternalError: (1003, 'Transaction error, need to rollback.')", "trace": "self = <utils.pysql.PyMySQL object at 0x00000000055E9E80>\ntable = 'customer_verify_email'\ndata = {'creation_date': '2021-04-28 14:09:58', 'cust_id': 0, 'verify_code': 'sm00ms', 'verify_mobile': 18811348250, ...}\n\n    def mysqlinsert(self, table,data):\n        '''\n    \n        :param table: 插入表\n        :param data: 插入数据（字段和值组成的字典）\n        :return:\n        '''\n    \n        sql=\" insert into \"+ table+\" \"\n    \n        column=''\n        column_value=''\n        for key,value in data.items():\n            column+=key+\",\"\n            if isinstance(value, str):\n                column_value += \"'\" + str(value) + \"'\"+\",\"\n            else:\n                column_value += str(value)+\",\"\n    \n        sql=sql+\"(\"+column.strip(',')+\") values (\"+column_value.strip(',')+\")\"\n    \n        try:\n            cursor = self.conn.cursor()\n>           cursor.execute(sql)\n\nutils\\pysql.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.cursors.Cursor object at 0x00000000055E9080>\nquery = \" insert into customer_verify_email (cust_id,verify_mobile,verify_type,verify_code,verify_send_date,verify_timeout_dat...s,creation_date) values (0,18811348250,2,'sm00ms','2021-04-28 14:09:58','2021-04-29 14:09:58',0,'2021-04-28 14:09:58')\"\nargs = None\n\n    def execute(self, query, args=None):\n        \"\"\"Execute a query\n    \n        :param str query: Query to execute.\n    \n        :param args: parameters used with query. (optional)\n        :type args: tuple, list or dict\n    \n        :return: Number of affected rows\n        :rtype: int\n    \n        If args is a list or tuple, %s can be used as a placeholder in the query.\n        If args is a dict, %(name)s can be used as a placeholder in the query.\n        \"\"\"\n        while self.nextset():\n            pass\n    \n        query = self.mogrify(query, args)\n    \n>       result = self._query(query)\n\nvenv\\lib\\site-packages\\pymysql\\cursors.py:170: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.cursors.Cursor object at 0x00000000055E9080>\nq = \" insert into customer_verify_email (cust_id,verify_mobile,verify_type,verify_code,verify_send_date,verify_timeout_dat...s,creation_date) values (0,18811348250,2,'sm00ms','2021-04-28 14:09:58','2021-04-29 14:09:58',0,'2021-04-28 14:09:58')\"\n\n    def _query(self, q):\n        conn = self._get_db()\n        self._last_executed = q\n        self._clear_result()\n>       conn.query(q)\n\nvenv\\lib\\site-packages\\pymysql\\cursors.py:328: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.connections.Connection object at 0x0000000004C47E48>\nsql = b\" insert into customer_verify_email (cust_id,verify_mobile,verify_type,verify_code,verify_send_date,verify_timeout_da...s,creation_date) values (0,18811348250,2,'sm00ms','2021-04-28 14:09:58','2021-04-29 14:09:58',0,'2021-04-28 14:09:58')\"\nunbuffered = False\n\n    def query(self, sql, unbuffered=False):\n        # if DEBUG:\n        #     print(\"DEBUG: sending query:\", sql)\n        if isinstance(sql, text_type) and not (JYTHON or IRONPYTHON):\n            if PY2:\n                sql = sql.encode(self.encoding)\n            else:\n                sql = sql.encode(self.encoding, 'surrogateescape')\n        self._execute_command(COMMAND.COM_QUERY, sql)\n>       self._affected_rows = self._read_query_result(unbuffered=unbuffered)\n\nvenv\\lib\\site-packages\\pymysql\\connections.py:517: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.connections.Connection object at 0x0000000004C47E48>\nunbuffered = False\n\n    def _read_query_result(self, unbuffered=False):\n        self._result = None\n        if unbuffered:\n            try:\n                result = MySQLResult(self)\n                result.init_unbuffered_query()\n            except:\n                result.unbuffered_active = False\n                result.connection = None\n                raise\n        else:\n            result = MySQLResult(self)\n>           result.read()\n\nvenv\\lib\\site-packages\\pymysql\\connections.py:732: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.connections.MySQLResult object at 0x00000000055E92B0>\n\n    def read(self):\n        try:\n>           first_packet = self.connection._read_packet()\n\nvenv\\lib\\site-packages\\pymysql\\connections.py:1075: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.connections.Connection object at 0x0000000004C47E48>\npacket_type = <class 'pymysql.protocol.MysqlPacket'>\n\n    def _read_packet(self, packet_type=MysqlPacket):\n        \"\"\"Read an entire \"mysql packet\" in its entirety from the network\n        and return a MysqlPacket type that represents the results.\n    \n        :raise OperationalError: If the connection to the MySQL server is lost.\n        :raise InternalError: If the packet sequence number is wrong.\n        \"\"\"\n        buff = b''\n        while True:\n            packet_header = self._read_bytes(4)\n            #if DEBUG: dump_packet(packet_header)\n    \n            btrl, btrh, packet_number = struct.unpack('<HBB', packet_header)\n            bytes_to_read = btrl + (btrh << 16)\n            if packet_number != self._next_seq_id:\n                self._force_close()\n                if packet_number == 0:\n                    # MariaDB sends error packet with seqno==0 when shutdown\n                    raise err.OperationalError(\n                        CR.CR_SERVER_LOST,\n                        \"Lost connection to MySQL server during query\")\n                raise err.InternalError(\n                    \"Packet sequence number wrong - got %d expected %d\"\n                    % (packet_number, self._next_seq_id))\n            self._next_seq_id = (self._next_seq_id + 1) % 256\n    \n            recv_data = self._read_bytes(bytes_to_read)\n            if DEBUG: dump_packet(recv_data)\n            buff += recv_data\n            # https://dev.mysql.com/doc/internals/en/sending-more-than-16mbyte.html\n            if bytes_to_read == 0xffffff:\n                continue\n            if bytes_to_read < MAX_PACKET_LEN:\n                break\n    \n        packet = packet_type(buff, self.encoding)\n>       packet.check_error()\n\nvenv\\lib\\site-packages\\pymysql\\connections.py:684: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.protocol.MysqlPacket object at 0x00000000055E91D0>\n\n    def check_error(self):\n        if self.is_error_packet():\n            self.rewind()\n            self.advance(1)  # field_count == error (we already know that)\n            errno = self.read_uint16()\n            if DEBUG: print(\"errno =\", errno)\n>           err.raise_mysql_exception(self._data)\n\nvenv\\lib\\site-packages\\pymysql\\protocol.py:220: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndata = b\"\\xff\\xeb\\x03#HY000Transaction error, need to rollback. errno:1054 Unknown column 'verify_mobile' in 'field list'\"\n\n    def raise_mysql_exception(data):\n        errno = struct.unpack('<h', data[1:3])[0]\n        is_41 = data[3:4] == b\"#\"\n        if is_41:\n            # client protocol 4.1\n            errval = data[9:].decode('utf-8', 'replace')\n        else:\n            errval = data[3:].decode('utf-8', 'replace')\n        errorclass = error_map.get(errno, InternalError)\n>       raise errorclass(errno, errval)\nE       pymysql.err.InternalError: (1003, \"Transaction error, need to rollback. errno:1054 Unknown column 'verify_mobile' in 'field list'\")\n\nvenv\\lib\\site-packages\\pymysql\\err.py:109: InternalError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <utils.pysql.PyMySQL object at 0x00000000055E9E80>\ntable = 'customer_verify_email'\ndata = {'creation_date': '2021-04-28 14:09:58', 'cust_id': 0, 'verify_code': 'sm00ms', 'verify_mobile': 18811348250, ...}\n\n    def mysqlinsert(self, table,data):\n        '''\n    \n        :param table: 插入表\n        :param data: 插入数据（字段和值组成的字典）\n        :return:\n        '''\n    \n        sql=\" insert into \"+ table+\" \"\n    \n        column=''\n        column_value=''\n        for key,value in data.items():\n            column+=key+\",\"\n            if isinstance(value, str):\n                column_value += \"'\" + str(value) + \"'\"+\",\"\n            else:\n                column_value += str(value)+\",\"\n    \n        sql=sql+\"(\"+column.strip(',')+\") values (\"+column_value.strip(',')+\")\"\n    \n        try:\n            cursor = self.conn.cursor()\n            cursor.execute(sql)\n        except:\n            self.conn.ping()  # 超时重连，默认300s\n            cursor = self.conn.cursor()\n>           cursor.execute(sql)\n\nutils\\pysql.py:126: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.cursors.Cursor object at 0x00000000055E93C8>\nquery = \" insert into customer_verify_email (cust_id,verify_mobile,verify_type,verify_code,verify_send_date,verify_timeout_dat...s,creation_date) values (0,18811348250,2,'sm00ms','2021-04-28 14:09:58','2021-04-29 14:09:58',0,'2021-04-28 14:09:58')\"\nargs = None\n\n    def execute(self, query, args=None):\n        \"\"\"Execute a query\n    \n        :param str query: Query to execute.\n    \n        :param args: parameters used with query. (optional)\n        :type args: tuple, list or dict\n    \n        :return: Number of affected rows\n        :rtype: int\n    \n        If args is a list or tuple, %s can be used as a placeholder in the query.\n        If args is a dict, %(name)s can be used as a placeholder in the query.\n        \"\"\"\n        while self.nextset():\n            pass\n    \n        query = self.mogrify(query, args)\n    \n>       result = self._query(query)\n\nvenv\\lib\\site-packages\\pymysql\\cursors.py:170: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.cursors.Cursor object at 0x00000000055E93C8>\nq = \" insert into customer_verify_email (cust_id,verify_mobile,verify_type,verify_code,verify_send_date,verify_timeout_dat...s,creation_date) values (0,18811348250,2,'sm00ms','2021-04-28 14:09:58','2021-04-29 14:09:58',0,'2021-04-28 14:09:58')\"\n\n    def _query(self, q):\n        conn = self._get_db()\n        self._last_executed = q\n        self._clear_result()\n>       conn.query(q)\n\nvenv\\lib\\site-packages\\pymysql\\cursors.py:328: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.connections.Connection object at 0x0000000004C47E48>\nsql = b\" insert into customer_verify_email (cust_id,verify_mobile,verify_type,verify_code,verify_send_date,verify_timeout_da...s,creation_date) values (0,18811348250,2,'sm00ms','2021-04-28 14:09:58','2021-04-29 14:09:58',0,'2021-04-28 14:09:58')\"\nunbuffered = False\n\n    def query(self, sql, unbuffered=False):\n        # if DEBUG:\n        #     print(\"DEBUG: sending query:\", sql)\n        if isinstance(sql, text_type) and not (JYTHON or IRONPYTHON):\n            if PY2:\n                sql = sql.encode(self.encoding)\n            else:\n                sql = sql.encode(self.encoding, 'surrogateescape')\n        self._execute_command(COMMAND.COM_QUERY, sql)\n>       self._affected_rows = self._read_query_result(unbuffered=unbuffered)\n\nvenv\\lib\\site-packages\\pymysql\\connections.py:517: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.connections.Connection object at 0x0000000004C47E48>\nunbuffered = False\n\n    def _read_query_result(self, unbuffered=False):\n        self._result = None\n        if unbuffered:\n            try:\n                result = MySQLResult(self)\n                result.init_unbuffered_query()\n            except:\n                result.unbuffered_active = False\n                result.connection = None\n                raise\n        else:\n            result = MySQLResult(self)\n>           result.read()\n\nvenv\\lib\\site-packages\\pymysql\\connections.py:732: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.connections.MySQLResult object at 0x00000000055E94A8>\n\n    def read(self):\n        try:\n>           first_packet = self.connection._read_packet()\n\nvenv\\lib\\site-packages\\pymysql\\connections.py:1075: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.connections.Connection object at 0x0000000004C47E48>\npacket_type = <class 'pymysql.protocol.MysqlPacket'>\n\n    def _read_packet(self, packet_type=MysqlPacket):\n        \"\"\"Read an entire \"mysql packet\" in its entirety from the network\n        and return a MysqlPacket type that represents the results.\n    \n        :raise OperationalError: If the connection to the MySQL server is lost.\n        :raise InternalError: If the packet sequence number is wrong.\n        \"\"\"\n        buff = b''\n        while True:\n            packet_header = self._read_bytes(4)\n            #if DEBUG: dump_packet(packet_header)\n    \n            btrl, btrh, packet_number = struct.unpack('<HBB', packet_header)\n            bytes_to_read = btrl + (btrh << 16)\n            if packet_number != self._next_seq_id:\n                self._force_close()\n                if packet_number == 0:\n                    # MariaDB sends error packet with seqno==0 when shutdown\n                    raise err.OperationalError(\n                        CR.CR_SERVER_LOST,\n                        \"Lost connection to MySQL server during query\")\n                raise err.InternalError(\n                    \"Packet sequence number wrong - got %d expected %d\"\n                    % (packet_number, self._next_seq_id))\n            self._next_seq_id = (self._next_seq_id + 1) % 256\n    \n            recv_data = self._read_bytes(bytes_to_read)\n            if DEBUG: dump_packet(recv_data)\n            buff += recv_data\n            # https://dev.mysql.com/doc/internals/en/sending-more-than-16mbyte.html\n            if bytes_to_read == 0xffffff:\n                continue\n            if bytes_to_read < MAX_PACKET_LEN:\n                break\n    \n        packet = packet_type(buff, self.encoding)\n>       packet.check_error()\n\nvenv\\lib\\site-packages\\pymysql\\connections.py:684: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.protocol.MysqlPacket object at 0x00000000055E9198>\n\n    def check_error(self):\n        if self.is_error_packet():\n            self.rewind()\n            self.advance(1)  # field_count == error (we already know that)\n            errno = self.read_uint16()\n            if DEBUG: print(\"errno =\", errno)\n>           err.raise_mysql_exception(self._data)\n\nvenv\\lib\\site-packages\\pymysql\\protocol.py:220: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndata = b\"\\xff\\xeb\\x03#HY000Transaction error, need to rollback. errno:1054 Unknown column 'verify_mobile' in 'field list'\"\n\n    def raise_mysql_exception(data):\n        errno = struct.unpack('<h', data[1:3])[0]\n        is_41 = data[3:4] == b\"#\"\n        if is_41:\n            # client protocol 4.1\n            errval = data[9:].decode('utf-8', 'replace')\n        else:\n            errval = data[3:].decode('utf-8', 'replace')\n        errorclass = error_map.get(errno, InternalError)\n>       raise errorclass(errno, errval)\nE       pymysql.err.InternalError: (1003, \"Transaction error, need to rollback. errno:1054 Unknown column 'verify_mobile' in 'field list'\")\n\nvenv\\lib\\site-packages\\pymysql\\err.py:109: InternalError\n\nDuring handling of the above exception, another exception occurred:\n\n    def setup_module():\n        '''用例数据初始化'''\n        #向email_verify 表中插入一条数据\n        s_date_date=datetime.datetime.now()\n        s_date=s_date_date.strftime(\"%Y-%m-%d %H:%M:%S\")\n        e_date_date=s_date_date+datetime.timedelta(days=1)\n        e_date=e_date_date.strftime(\"%Y-%m-%d %H:%M:%S\")\n    \n        insert_data={\n            'cust_id':Check_Sms_Vcode.initparams['custid'],\n            'verify_mobile':Check_Sms_Vcode.initparams['mobile_phone'],\n            'verify_type':Check_Sms_Vcode.initparams['verify_type'],\n            'verify_code':Check_Sms_Vcode.initparams['sms_vcode'],\n            'verify_send_date': s_date,\n            'verify_timeout_date':e_date,\n            'verify_status': 0,\n            'creation_date':s_date\n        }\n    \n>       PyMySQL().mysqlinsert(\"customer_verify_email\",insert_data)\n\ntestcase\\Loginapi\\Check_Sms_Vcode_test.py:86: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\pysql.py:128: in mysqlinsert\n    self.conn.commit()\nvenv\\lib\\site-packages\\pymysql\\connections.py:420: in commit\n    self._read_ok_packet()\nvenv\\lib\\site-packages\\pymysql\\connections.py:394: in _read_ok_packet\n    pkt = self._read_packet()\nvenv\\lib\\site-packages\\pymysql\\connections.py:684: in _read_packet\n    packet.check_error()\nvenv\\lib\\site-packages\\pymysql\\protocol.py:220: in check_error\n    err.raise_mysql_exception(self._data)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndata = b'\\xff\\xeb\\x03#HY000Transaction error, need to rollback.'\n\n    def raise_mysql_exception(data):\n        errno = struct.unpack('<h', data[1:3])[0]\n        is_41 = data[3:4] == b\"#\"\n        if is_41:\n            # client protocol 4.1\n            errval = data[9:].decode('utf-8', 'replace')\n        else:\n            errval = data[3:].decode('utf-8', 'replace')\n        errorclass = error_map.get(errno, InternalError)\n>       raise errorclass(errno, errval)\nE       pymysql.err.InternalError: (1003, 'Transaction error, need to rollback.')\n\nvenv\\lib\\site-packages\\pymysql\\err.py:109: InternalError"}, "parameters": [{"name": "pyfixture", "value": "({'custid': 0, 'mobile_phone': 18811348250, 'verify_type': 2, 'sms_vcode': 'sm00ms', 'change_status_flg': 1}, ('0', '成功'))"}], "start": 1619590198375, "stop": 1619590198375, "uuid": "b9fa3d01-92cb-40d5-8491-21ce5ebdecdd", "historyId": "9a5cf49bc773efab99c740d25cce6ba5", "testCaseId": "447126dbf5328370d833e1c60d52c7d6", "fullName": "testcase.Loginapi.Check_Sms_Vcode_test#test_Check_Sms_Vcode", "labels": [{"name": "tag", "value": "flaky(reruns=1, reruns_delay=10)"}, {"name": "tag", "value": "check_sms_vcode"}, {"name": "parentSuite", "value": "testcase.Loginapi"}, {"name": "suite", "value": "Check_Sms_Vcode_test"}, {"name": "host", "value": "A06P-A90F12DAA"}, {"name": "thread", "value": "2532-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.Loginapi.Check_Sms_Vcode_test"}]}