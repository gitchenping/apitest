{"name": "用户名和密码都正确", "status": "broken", "statusDetails": {"message": "pymysql.err.InterfaceError: (0, '')", "trace": "self = <utils.pysql.PyMySQL object at 0x00000000049753C8>\nsql = 'insert into customer_verify_sms(verify_mobile,verify_type,verify_code,verify_send_date,verify_date,verify_timeout_dat...) values(18811348250,7,345678,\"2020-07-23 16:16:02.251840\",\"2020-07-23 16:16:02.251840\",2020-07-24 16:16:02.251840,0);'\n\n    def mysqlinsert(self, sql):\n    \n        try:\n            cursor = self.conn.cursor()\n>           cursor.execute(sql)\n\nutils\\pysql.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.cursors.Cursor object at 0x00000000049B24E0>\nquery = 'insert into customer_verify_sms(verify_mobile,verify_type,verify_code,verify_send_date,verify_date,verify_timeout_dat...) values(18811348250,7,345678,\"2020-07-23 16:16:02.251840\",\"2020-07-23 16:16:02.251840\",2020-07-24 16:16:02.251840,0);'\nargs = None\n\n    def execute(self, query, args=None):\n        \"\"\"Execute a query\n    \n        :param str query: Query to execute.\n    \n        :param args: parameters used with query. (optional)\n        :type args: tuple, list or dict\n    \n        :return: Number of affected rows\n        :rtype: int\n    \n        If args is a list or tuple, %s can be used as a placeholder in the query.\n        If args is a dict, %(name)s can be used as a placeholder in the query.\n        \"\"\"\n        while self.nextset():\n            pass\n    \n        query = self.mogrify(query, args)\n    \n>       result = self._query(query)\n\nvenv\\lib\\site-packages\\pymysql\\cursors.py:170: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.cursors.Cursor object at 0x00000000049B24E0>\nq = 'insert into customer_verify_sms(verify_mobile,verify_type,verify_code,verify_send_date,verify_date,verify_timeout_dat...) values(18811348250,7,345678,\"2020-07-23 16:16:02.251840\",\"2020-07-23 16:16:02.251840\",2020-07-24 16:16:02.251840,0);'\n\n    def _query(self, q):\n        conn = self._get_db()\n        self._last_executed = q\n        self._clear_result()\n>       conn.query(q)\n\nvenv\\lib\\site-packages\\pymysql\\cursors.py:328: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.connections.Connection object at 0x0000000003E84F60>\nsql = b'insert into customer_verify_sms(verify_mobile,verify_type,verify_code,verify_send_date,verify_date,verify_timeout_da...) values(18811348250,7,345678,\"2020-07-23 16:16:02.251840\",\"2020-07-23 16:16:02.251840\",2020-07-24 16:16:02.251840,0);'\nunbuffered = False\n\n    def query(self, sql, unbuffered=False):\n        # if DEBUG:\n        #     print(\"DEBUG: sending query:\", sql)\n        if isinstance(sql, text_type) and not (JYTHON or IRONPYTHON):\n            if PY2:\n                sql = sql.encode(self.encoding)\n            else:\n                sql = sql.encode(self.encoding, 'surrogateescape')\n>       self._execute_command(COMMAND.COM_QUERY, sql)\n\nvenv\\lib\\site-packages\\pymysql\\connections.py:516: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.connections.Connection object at 0x0000000003E84F60>\ncommand = 3\nsql = b'insert into customer_verify_sms(verify_mobile,verify_type,verify_code,verify_send_date,verify_date,verify_timeout_da...) values(18811348250,7,345678,\"2020-07-23 16:16:02.251840\",\"2020-07-23 16:16:02.251840\",2020-07-24 16:16:02.251840,0);'\n\n    def _execute_command(self, command, sql):\n        \"\"\"\n        :raise InterfaceError: If the connection is closed.\n        :raise ValueError: If no username was specified.\n        \"\"\"\n        if not self._sock:\n>           raise err.InterfaceError(\"(0, '')\")\nE           pymysql.err.InterfaceError: (0, '')\n\nvenv\\lib\\site-packages\\pymysql\\connections.py:750: InterfaceError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <utils.pysql.PyMySQL object at 0x00000000049753C8>\nsql = 'insert into customer_verify_sms(verify_mobile,verify_type,verify_code,verify_send_date,verify_date,verify_timeout_dat...) values(18811348250,7,345678,\"2020-07-23 16:16:02.251840\",\"2020-07-23 16:16:02.251840\",2020-07-24 16:16:02.251840,0);'\n\n    def mysqlinsert(self, sql):\n    \n        try:\n            cursor = self.conn.cursor()\n            cursor.execute(sql)\n        except:\n            self.conn.ping()  # 超时重连，默认300s\n            cursor = self.conn.cursor()\n>           cursor.execute(sql)\n\nutils\\pysql.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.cursors.Cursor object at 0x00000000049D3E10>\nquery = 'insert into customer_verify_sms(verify_mobile,verify_type,verify_code,verify_send_date,verify_date,verify_timeout_dat...) values(18811348250,7,345678,\"2020-07-23 16:16:02.251840\",\"2020-07-23 16:16:02.251840\",2020-07-24 16:16:02.251840,0);'\nargs = None\n\n    def execute(self, query, args=None):\n        \"\"\"Execute a query\n    \n        :param str query: Query to execute.\n    \n        :param args: parameters used with query. (optional)\n        :type args: tuple, list or dict\n    \n        :return: Number of affected rows\n        :rtype: int\n    \n        If args is a list or tuple, %s can be used as a placeholder in the query.\n        If args is a dict, %(name)s can be used as a placeholder in the query.\n        \"\"\"\n        while self.nextset():\n            pass\n    \n        query = self.mogrify(query, args)\n    \n>       result = self._query(query)\n\nvenv\\lib\\site-packages\\pymysql\\cursors.py:170: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.cursors.Cursor object at 0x00000000049D3E10>\nq = 'insert into customer_verify_sms(verify_mobile,verify_type,verify_code,verify_send_date,verify_date,verify_timeout_dat...) values(18811348250,7,345678,\"2020-07-23 16:16:02.251840\",\"2020-07-23 16:16:02.251840\",2020-07-24 16:16:02.251840,0);'\n\n    def _query(self, q):\n        conn = self._get_db()\n        self._last_executed = q\n        self._clear_result()\n>       conn.query(q)\n\nvenv\\lib\\site-packages\\pymysql\\cursors.py:328: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.connections.Connection object at 0x0000000003E84F60>\nsql = b'insert into customer_verify_sms(verify_mobile,verify_type,verify_code,verify_send_date,verify_date,verify_timeout_da...) values(18811348250,7,345678,\"2020-07-23 16:16:02.251840\",\"2020-07-23 16:16:02.251840\",2020-07-24 16:16:02.251840,0);'\nunbuffered = False\n\n    def query(self, sql, unbuffered=False):\n        # if DEBUG:\n        #     print(\"DEBUG: sending query:\", sql)\n        if isinstance(sql, text_type) and not (JYTHON or IRONPYTHON):\n            if PY2:\n                sql = sql.encode(self.encoding)\n            else:\n                sql = sql.encode(self.encoding, 'surrogateescape')\n        self._execute_command(COMMAND.COM_QUERY, sql)\n>       self._affected_rows = self._read_query_result(unbuffered=unbuffered)\n\nvenv\\lib\\site-packages\\pymysql\\connections.py:517: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.connections.Connection object at 0x0000000003E84F60>\nunbuffered = False\n\n    def _read_query_result(self, unbuffered=False):\n        self._result = None\n        if unbuffered:\n            try:\n                result = MySQLResult(self)\n                result.init_unbuffered_query()\n            except:\n                result.unbuffered_active = False\n                result.connection = None\n                raise\n        else:\n            result = MySQLResult(self)\n>           result.read()\n\nvenv\\lib\\site-packages\\pymysql\\connections.py:732: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.connections.MySQLResult object at 0x00000000049D3C50>\n\n    def read(self):\n        try:\n>           first_packet = self.connection._read_packet()\n\nvenv\\lib\\site-packages\\pymysql\\connections.py:1075: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.connections.Connection object at 0x0000000003E84F60>\npacket_type = <class 'pymysql.protocol.MysqlPacket'>\n\n    def _read_packet(self, packet_type=MysqlPacket):\n        \"\"\"Read an entire \"mysql packet\" in its entirety from the network\n        and return a MysqlPacket type that represents the results.\n    \n        :raise OperationalError: If the connection to the MySQL server is lost.\n        :raise InternalError: If the packet sequence number is wrong.\n        \"\"\"\n        buff = b''\n        while True:\n>           packet_header = self._read_bytes(4)\n\nvenv\\lib\\site-packages\\pymysql\\connections.py:657: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.connections.Connection object at 0x0000000003E84F60>\nnum_bytes = 4\n\n    def _read_bytes(self, num_bytes):\n        self._sock.settimeout(self._read_timeout)\n        while True:\n            try:\n                data = self._rfile.read(num_bytes)\n                break\n            except (IOError, OSError) as e:\n                if e.errno == errno.EINTR:\n                    continue\n                self._force_close()\n                raise err.OperationalError(\n                    CR.CR_SERVER_LOST,\n                    \"Lost connection to MySQL server during query (%s)\" % (e,))\n            except BaseException:\n                # Don't convert unknown exception to MySQLError.\n                self._force_close()\n                raise\n        if len(data) < num_bytes:\n            self._force_close()\n            raise err.OperationalError(\n>               CR.CR_SERVER_LOST, \"Lost connection to MySQL server during query\")\nE           pymysql.err.OperationalError: (2013, 'Lost connection to MySQL server during query')\n\nvenv\\lib\\site-packages\\pymysql\\connections.py:707: OperationalError\n\nDuring handling of the above exception, another exception occurred:\n\n    def setup_module():\n    \n        mobile_phone=LoingSms.initparams['mobile_phone']\n    \n        #1.清除\n        PyMySQL().mysqldel('customer_verify_sms','verify_mobile',\"mobile_phone\")\n    \n        #2.插入\n        vcode='345678'\n        LoingSms.initparams['vcode']=vcode\n    \n        now = datetime.datetime.now()\n        now_2=now+datetime.timedelta(days = 1)\n    \n        sql=\"insert into customer_verify_sms(verify_mobile,verify_type,verify_code,verify_send_date,\" \\\n            \"verify_date,verify_timeout_date,verify_status,last_changed_date) \"\\\n                  'values({},{},{},{},{},{},{});'.format(mobile_phone,7,vcode, '\"'+str(now)+ '\"','\"'+str(now)+ '\"',str(now_2),0, '\"'+str(now)+'\"')\n>       PyMySQL().mysqlinsert(sql)\n\ntestcase\\Loginapi\\Login_Sms_test.py:123: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\pysql.py:66: in mysqlinsert\n    self.conn.commit()\nvenv\\lib\\site-packages\\pymysql\\connections.py:419: in commit\n    self._execute_command(COMMAND.COM_QUERY, \"COMMIT\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.connections.Connection object at 0x0000000003E84F60>\ncommand = 3, sql = 'COMMIT'\n\n    def _execute_command(self, command, sql):\n        \"\"\"\n        :raise InterfaceError: If the connection is closed.\n        :raise ValueError: If no username was specified.\n        \"\"\"\n        if not self._sock:\n>           raise err.InterfaceError(\"(0, '')\")\nE           pymysql.err.InterfaceError: (0, '')\n\nvenv\\lib\\site-packages\\pymysql\\connections.py:750: InterfaceError"}, "parameters": [{"name": "pyfixture", "value": "({'mobile_phone': 18811348250, 'vcode': 123456, 'appkey': 20020001, 'ip_address': '192.168.90.99', 'watchdog_flg': 1, 'permanent_id': 23243242341241231212, 'trace_id': 3234234242342132, 'source_url': 'http://www.ui.com', 'udid': 'abc29088809812121', 'client_version': '10.7.0', 'autokey': None, 'json_info': None, 'tongdun_deviceid': None, 'shumei_deviceid': None, 'result_format': 'json'}, ('0', '用户名和密码都正确'))"}], "start": 1595492162526, "stop": 1595492162526, "uuid": "1993d2f8-3d66-49b4-845e-242c2df4eec0", "historyId": "3f7ba6a158430e47e469098d638a9c30", "testCaseId": "3b771a89a9d875ddc678304aa7d66743", "fullName": "testcase.Loginapi.Login_Sms_test#test_LoginSms", "labels": [{"name": "tag", "value": "login_sms"}, {"name": "tag", "value": "flaky(reruns=0, reruns_delay=10)"}, {"name": "parentSuite", "value": "testcase.Loginapi"}, {"name": "suite", "value": "Login_Sms_test"}, {"name": "host", "value": "A06P-A90F12DAA"}, {"name": "thread", "value": "5084-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.Loginapi.Login_Sms_test"}]}