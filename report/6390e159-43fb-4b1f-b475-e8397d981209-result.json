{"name": "test_SetCombineResult[pyfixture3]", "status": "broken", "statusDetails": {"message": "pymysql.err.ProgrammingError: (1064, \"can't find table define in schema CUSTOMER_COMBINE_PROCESSWHERE schema:TESTDB\")", "trace": "self = <utils.pysql.PyMySQL object at 0x00000000051D82E8>\ntb = 'customer_combine_process'\ndata = {'combine_cust_id': 50266338, 'cust_id': 50266354}\n\n    def checkdbok(self,tb=None,data=None):\n    \n        sql=\"select count(*) from \"+ tb\n        where=\" where \"\n        for key in data.keys():\n            if isinstance(data[key], str):\n                value = \"'\" + str(data[key]) + \"'\"\n            else:\n                value = str(data[key])\n            where += str(key) + \"=\" + value + \" and \"\n    \n        sql = sql + where.strip(' and ')\n    \n        try:\n            cursor = self.conn.cursor()\n>           cursor.execute(sql)\n\nutils\\pysql.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.cursors.Cursor object at 0x00000000051D8320>\nquery = 'select count(*) from customer_combine_processwhere cust_id=50266354 and combine_cust_id=50266338'\nargs = None\n\n    def execute(self, query, args=None):\n        \"\"\"Execute a query\n    \n        :param str query: Query to execute.\n    \n        :param args: parameters used with query. (optional)\n        :type args: tuple, list or dict\n    \n        :return: Number of affected rows\n        :rtype: int\n    \n        If args is a list or tuple, %s can be used as a placeholder in the query.\n        If args is a dict, %(name)s can be used as a placeholder in the query.\n        \"\"\"\n        while self.nextset():\n            pass\n    \n        query = self.mogrify(query, args)\n    \n>       result = self._query(query)\n\nvenv\\lib\\site-packages\\pymysql\\cursors.py:170: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.cursors.Cursor object at 0x00000000051D8320>\nq = 'select count(*) from customer_combine_processwhere cust_id=50266354 and combine_cust_id=50266338'\n\n    def _query(self, q):\n        conn = self._get_db()\n        self._last_executed = q\n        self._clear_result()\n>       conn.query(q)\n\nvenv\\lib\\site-packages\\pymysql\\cursors.py:328: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.connections.Connection object at 0x0000000004959550>\nsql = b'select count(*) from customer_combine_processwhere cust_id=50266354 and combine_cust_id=50266338'\nunbuffered = False\n\n    def query(self, sql, unbuffered=False):\n        # if DEBUG:\n        #     print(\"DEBUG: sending query:\", sql)\n        if isinstance(sql, text_type) and not (JYTHON or IRONPYTHON):\n            if PY2:\n                sql = sql.encode(self.encoding)\n            else:\n                sql = sql.encode(self.encoding, 'surrogateescape')\n        self._execute_command(COMMAND.COM_QUERY, sql)\n>       self._affected_rows = self._read_query_result(unbuffered=unbuffered)\n\nvenv\\lib\\site-packages\\pymysql\\connections.py:517: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.connections.Connection object at 0x0000000004959550>\nunbuffered = False\n\n    def _read_query_result(self, unbuffered=False):\n        self._result = None\n        if unbuffered:\n            try:\n                result = MySQLResult(self)\n                result.init_unbuffered_query()\n            except:\n                result.unbuffered_active = False\n                result.connection = None\n                raise\n        else:\n            result = MySQLResult(self)\n>           result.read()\n\nvenv\\lib\\site-packages\\pymysql\\connections.py:732: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.connections.MySQLResult object at 0x00000000051D8F60>\n\n    def read(self):\n        try:\n>           first_packet = self.connection._read_packet()\n\nvenv\\lib\\site-packages\\pymysql\\connections.py:1075: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.connections.Connection object at 0x0000000004959550>\npacket_type = <class 'pymysql.protocol.MysqlPacket'>\n\n    def _read_packet(self, packet_type=MysqlPacket):\n        \"\"\"Read an entire \"mysql packet\" in its entirety from the network\n        and return a MysqlPacket type that represents the results.\n    \n        :raise OperationalError: If the connection to the MySQL server is lost.\n        :raise InternalError: If the packet sequence number is wrong.\n        \"\"\"\n        buff = b''\n        while True:\n            packet_header = self._read_bytes(4)\n            #if DEBUG: dump_packet(packet_header)\n    \n            btrl, btrh, packet_number = struct.unpack('<HBB', packet_header)\n            bytes_to_read = btrl + (btrh << 16)\n            if packet_number != self._next_seq_id:\n                self._force_close()\n                if packet_number == 0:\n                    # MariaDB sends error packet with seqno==0 when shutdown\n                    raise err.OperationalError(\n                        CR.CR_SERVER_LOST,\n                        \"Lost connection to MySQL server during query\")\n                raise err.InternalError(\n                    \"Packet sequence number wrong - got %d expected %d\"\n                    % (packet_number, self._next_seq_id))\n            self._next_seq_id = (self._next_seq_id + 1) % 256\n    \n            recv_data = self._read_bytes(bytes_to_read)\n            if DEBUG: dump_packet(recv_data)\n            buff += recv_data\n            # https://dev.mysql.com/doc/internals/en/sending-more-than-16mbyte.html\n            if bytes_to_read == 0xffffff:\n                continue\n            if bytes_to_read < MAX_PACKET_LEN:\n                break\n    \n        packet = packet_type(buff, self.encoding)\n>       packet.check_error()\n\nvenv\\lib\\site-packages\\pymysql\\connections.py:684: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.protocol.MysqlPacket object at 0x00000000051D8F28>\n\n    def check_error(self):\n        if self.is_error_packet():\n            self.rewind()\n            self.advance(1)  # field_count == error (we already know that)\n            errno = self.read_uint16()\n            if DEBUG: print(\"errno =\", errno)\n>           err.raise_mysql_exception(self._data)\n\nvenv\\lib\\site-packages\\pymysql\\protocol.py:220: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndata = b\"\\xff(\\x04#HY000can't find table define in schema CUSTOMER_COMBINE_PROCESSWHERE schema:TESTDB\"\n\n    def raise_mysql_exception(data):\n        errno = struct.unpack('<h', data[1:3])[0]\n        is_41 = data[3:4] == b\"#\"\n        if is_41:\n            # client protocol 4.1\n            errval = data[9:].decode('utf-8', 'replace')\n        else:\n            errval = data[3:].decode('utf-8', 'replace')\n        errorclass = error_map.get(errno, InternalError)\n>       raise errorclass(errno, errval)\nE       pymysql.err.ProgrammingError: (1064, \"can't find table define in schema CUSTOMER_COMBINE_PROCESSWHERE schema:TESTDB\")\n\nvenv\\lib\\site-packages\\pymysql\\err.py:109: ProgrammingError\n\nDuring handling of the above exception, another exception occurred:\n\npyfixture = ({'custid': 50266354, 'custid_child': 50266338, 'msg': None, 'result_format': 'json', ...}, ('0', 'success'))\n\n    @pytest.mark.setcombineresult\n    @pytest.mark.flaky(reruns=1,reruns_delay=5)\n    def test_SetCombineResult(pyfixture):\n    \n        #请求\n        url=SetCombineResult.url\n        data=pyfixture[0]\n        res=request(url=url,data=data)\n        #print(data)\n        assert res['return_code']==pyfixture[1][0]\n        if res['return_code']==SetCombineResultReturnCodeEnum.SUCCESS.value[0]:\n            #检查数据库\n            data={'cust_id':SetCombineResult.initparams['custid'],\n                  'combine_cust_id': SetCombineResult.initparams['custid_child']\n            }\n>           assert PyMySQL().checkdbok('customer_combine_process',data),'''写入数据库失败'''\n\ntestcase\\Combineapi\\Set_Combine_Result_test.py:105: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\pysql.py:91: in checkdbok\n    cursor.execute(sql)\nvenv\\lib\\site-packages\\pymysql\\cursors.py:170: in execute\n    result = self._query(query)\nvenv\\lib\\site-packages\\pymysql\\cursors.py:328: in _query\n    conn.query(q)\nvenv\\lib\\site-packages\\pymysql\\connections.py:517: in query\n    self._affected_rows = self._read_query_result(unbuffered=unbuffered)\nvenv\\lib\\site-packages\\pymysql\\connections.py:732: in _read_query_result\n    result.read()\nvenv\\lib\\site-packages\\pymysql\\connections.py:1075: in read\n    first_packet = self.connection._read_packet()\nvenv\\lib\\site-packages\\pymysql\\connections.py:684: in _read_packet\n    packet.check_error()\nvenv\\lib\\site-packages\\pymysql\\protocol.py:220: in check_error\n    err.raise_mysql_exception(self._data)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndata = b\"\\xff(\\x04#HY000can't find table define in schema CUSTOMER_COMBINE_PROCESSWHERE schema:TESTDB\"\n\n    def raise_mysql_exception(data):\n        errno = struct.unpack('<h', data[1:3])[0]\n        is_41 = data[3:4] == b\"#\"\n        if is_41:\n            # client protocol 4.1\n            errval = data[9:].decode('utf-8', 'replace')\n        else:\n            errval = data[3:].decode('utf-8', 'replace')\n        errorclass = error_map.get(errno, InternalError)\n>       raise errorclass(errno, errval)\nE       pymysql.err.ProgrammingError: (1064, \"can't find table define in schema CUSTOMER_COMBINE_PROCESSWHERE schema:TESTDB\")\n\nvenv\\lib\\site-packages\\pymysql\\err.py:109: ProgrammingError"}, "parameters": [{"name": "pyfixture", "value": "({'custid': 50266354, 'custid_child': 50266338, 'type': 1, 'msg': None, 'result_format': 'json'}, ('0', 'success'))"}], "start": 1611141433145, "stop": 1611141433205, "uuid": "b6eb0145-b610-4800-af17-c4987b5a0bc3", "historyId": "e38353b069f435f2418eca5f0c84c586", "testCaseId": "42739142071e74743f9f500f9a030e74", "fullName": "testcase.Combineapi.Set_Combine_Result_test#test_SetCombineResult", "labels": [{"name": "tag", "value": "setcombineresult"}, {"name": "tag", "value": "flaky(reruns=1, reruns_delay=5)"}, {"name": "parentSuite", "value": "testcase.Combineapi"}, {"name": "suite", "value": "Set_Combine_Result_test"}, {"name": "host", "value": "A06P-A90F12DAA"}, {"name": "thread", "value": "5972-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.Combineapi.Set_Combine_Result_test"}]}