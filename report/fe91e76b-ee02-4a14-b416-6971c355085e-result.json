{"name": "请求成功", "status": "broken", "statusDetails": {"message": "pymysql.err.ProgrammingError: (1064, \"Sharding column can't be updated CUSTOMER->CUST_ID\")", "trace": "self = <utils.pysql.PyMySQL object at 0x00000000052A2D30>, table = 'customer'\nfilter = {'cust_id': 286427653}, data = {'cust_mobile': 18811348250}\n\n    def mysqlupdate(self,table,filter,data=None):\n    \n        sql = \"update \" + table\n        setcolumn=\" set \"\n        for key in filter.keys():\n            if isinstance(filter[key], str):\n                value = \"'\" + str(filter[key]) + \"'\"\n            else:\n                value = str(filter[key])\n            setcolumn+=str(key) + \"=\" + value +\",\"\n    \n        where = \" where \"\n        for key in data.keys():\n            if isinstance(data[key], str):\n                value = \"'\" + str(data[key]) + \"'\"\n            else:\n                value = str(data[key])\n            where += str(key) + \"=\" + value + \" and \"\n    \n        sql = sql +setcolumn.strip(\",\") +\" \"+ where.strip(' and ')\n        try:\n            cursor = self.conn.cursor()\n>           cursor.execute(sql)\n\nutils\\pysql.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.cursors.Cursor object at 0x00000000052A2550>\nquery = 'update customer set cust_id=286427653 where cust_mobile=18811348250'\nargs = None\n\n    def execute(self, query, args=None):\n        \"\"\"Execute a query\n    \n        :param str query: Query to execute.\n    \n        :param args: parameters used with query. (optional)\n        :type args: tuple, list or dict\n    \n        :return: Number of affected rows\n        :rtype: int\n    \n        If args is a list or tuple, %s can be used as a placeholder in the query.\n        If args is a dict, %(name)s can be used as a placeholder in the query.\n        \"\"\"\n        while self.nextset():\n            pass\n    \n        query = self.mogrify(query, args)\n    \n>       result = self._query(query)\n\nvenv\\lib\\site-packages\\pymysql\\cursors.py:170: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.cursors.Cursor object at 0x00000000052A2550>\nq = 'update customer set cust_id=286427653 where cust_mobile=18811348250'\n\n    def _query(self, q):\n        conn = self._get_db()\n        self._last_executed = q\n        self._clear_result()\n>       conn.query(q)\n\nvenv\\lib\\site-packages\\pymysql\\cursors.py:328: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.connections.Connection object at 0x0000000004AFAEF0>\nsql = b'update customer set cust_id=286427653 where cust_mobile=18811348250'\nunbuffered = False\n\n    def query(self, sql, unbuffered=False):\n        # if DEBUG:\n        #     print(\"DEBUG: sending query:\", sql)\n        if isinstance(sql, text_type) and not (JYTHON or IRONPYTHON):\n            if PY2:\n                sql = sql.encode(self.encoding)\n            else:\n                sql = sql.encode(self.encoding, 'surrogateescape')\n>       self._execute_command(COMMAND.COM_QUERY, sql)\n\nvenv\\lib\\site-packages\\pymysql\\connections.py:516: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.connections.Connection object at 0x0000000004AFAEF0>\ncommand = 3\nsql = b'update customer set cust_id=286427653 where cust_mobile=18811348250'\n\n    def _execute_command(self, command, sql):\n        \"\"\"\n        :raise InterfaceError: If the connection is closed.\n        :raise ValueError: If no username was specified.\n        \"\"\"\n        if not self._sock:\n>           raise err.InterfaceError(\"(0, '')\")\nE           pymysql.err.InterfaceError: (0, '')\n\nvenv\\lib\\site-packages\\pymysql\\connections.py:750: InterfaceError\n\nDuring handling of the above exception, another exception occurred:\n\n    def teardown_module():\n        '''用例结果数据销毁'''\n    \n        #改回原来数据库的值\n>       PyMySQL().mysqlupdate('customer',{'cust_id':Change_MobilePhone.initparams['custid']},{'cust_mobile':Change_MobilePhone.initparams['mobile_phone']})\n\ntestcase\\Loginapi\\Change_MobilePhone_test.py:102: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\pysql.py:76: in mysqlupdate\n    cursor.execute(sql)\nvenv\\lib\\site-packages\\pymysql\\cursors.py:170: in execute\n    result = self._query(query)\nvenv\\lib\\site-packages\\pymysql\\cursors.py:328: in _query\n    conn.query(q)\nvenv\\lib\\site-packages\\pymysql\\connections.py:517: in query\n    self._affected_rows = self._read_query_result(unbuffered=unbuffered)\nvenv\\lib\\site-packages\\pymysql\\connections.py:732: in _read_query_result\n    result.read()\nvenv\\lib\\site-packages\\pymysql\\connections.py:1075: in read\n    first_packet = self.connection._read_packet()\nvenv\\lib\\site-packages\\pymysql\\connections.py:684: in _read_packet\n    packet.check_error()\nvenv\\lib\\site-packages\\pymysql\\protocol.py:220: in check_error\n    err.raise_mysql_exception(self._data)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndata = b\"\\xff(\\x04#HY000Sharding column can't be updated CUSTOMER->CUST_ID\"\n\n    def raise_mysql_exception(data):\n        errno = struct.unpack('<h', data[1:3])[0]\n        is_41 = data[3:4] == b\"#\"\n        if is_41:\n            # client protocol 4.1\n            errval = data[9:].decode('utf-8', 'replace')\n        else:\n            errval = data[3:].decode('utf-8', 'replace')\n        errorclass = error_map.get(errno, InternalError)\n>       raise errorclass(errno, errval)\nE       pymysql.err.ProgrammingError: (1064, \"Sharding column can't be updated CUSTOMER->CUST_ID\")\n\nvenv\\lib\\site-packages\\pymysql\\err.py:109: ProgrammingError"}, "parameters": [{"name": "pyfixture", "value": "({'custid': 286427653, 'mobile_phone': 18811451515, 'type': 7, 'clientIP': '192.168.10.23', 'isFrontendCall': 'no', 'operatorName': 'auto_tester', 'appkey': 1000, 'unionId': '', 'openId': ''}, ('0', '请求成功'))"}], "start": 1618905066057, "stop": 1618905066122, "uuid": "6805ef86-5d4f-4a3e-a730-441fb5dc4e48", "historyId": "d44ad821f49f59f171003baec1420f5a", "testCaseId": "01cd1c9cbfa31c446f380425e509edb1", "fullName": "testcase.Loginapi.Change_MobilePhone_test#test_ChangeMobilePhone", "labels": [{"name": "tag", "value": "flaky(reruns=1, reruns_delay=10)"}, {"name": "tag", "value": "change_mobilephone"}, {"name": "parentSuite", "value": "testcase.Loginapi"}, {"name": "suite", "value": "Change_MobilePhone_test"}, {"name": "host", "value": "A06P-A90F12DAA"}, {"name": "thread", "value": "2052-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.Loginapi.Change_MobilePhone_test"}]}