{"name": "请求成功", "status": "broken", "statusDetails": {"message": "pymysql.err.InternalError: (1003, 'Transaction error, need to rollback.')", "trace": "self = <utils.pysql.PyMySQL object at 0x00000000052C19E8>, table = 'customer'\nfilter = {'cust_id': 286427653}, data = {'cust_mobile': 18811348250}\n\n    def mysqlupdate(self,table,filter,data=None):\n    \n        sql = \"update \" + table\n        setcolumn=\" set \"\n        for key in data.keys():\n            if isinstance(data[key], str):\n                value = \"'\" + str(data[key]) + \"'\"\n            else:\n                value = str(data[key])\n            setcolumn+=str(key) + \"=\" + value +\",\"\n    \n        where = \" where \"\n        for key in data.keys():\n            if isinstance(data[key], str):\n                value = \"'\" + str(data[key]) + \"'\"\n            else:\n                value = str(data[key])\n            where += str(key) + \"=\" + value + \" and \"\n    \n        sql = sql +setcolumn.strip(\",\") + where.strip(' and ')\n        try:\n            cursor = self.conn.cursor()\n>           cursor.execute(sql)\n\nutils\\pysql.py:72: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.cursors.Cursor object at 0x00000000052C1A58>\nquery = 'update customer set cust_mobile=18811348250where cust_mobile=18811348250'\nargs = None\n\n    def execute(self, query, args=None):\n        \"\"\"Execute a query\n    \n        :param str query: Query to execute.\n    \n        :param args: parameters used with query. (optional)\n        :type args: tuple, list or dict\n    \n        :return: Number of affected rows\n        :rtype: int\n    \n        If args is a list or tuple, %s can be used as a placeholder in the query.\n        If args is a dict, %(name)s can be used as a placeholder in the query.\n        \"\"\"\n        while self.nextset():\n            pass\n    \n        query = self.mogrify(query, args)\n    \n>       result = self._query(query)\n\nvenv\\lib\\site-packages\\pymysql\\cursors.py:170: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.cursors.Cursor object at 0x00000000052C1A58>\nq = 'update customer set cust_mobile=18811348250where cust_mobile=18811348250'\n\n    def _query(self, q):\n        conn = self._get_db()\n        self._last_executed = q\n        self._clear_result()\n>       conn.query(q)\n\nvenv\\lib\\site-packages\\pymysql\\cursors.py:328: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.connections.Connection object at 0x0000000004AF01D0>\nsql = b'update customer set cust_mobile=18811348250where cust_mobile=18811348250'\nunbuffered = False\n\n    def query(self, sql, unbuffered=False):\n        # if DEBUG:\n        #     print(\"DEBUG: sending query:\", sql)\n        if isinstance(sql, text_type) and not (JYTHON or IRONPYTHON):\n            if PY2:\n                sql = sql.encode(self.encoding)\n            else:\n                sql = sql.encode(self.encoding, 'surrogateescape')\n>       self._execute_command(COMMAND.COM_QUERY, sql)\n\nvenv\\lib\\site-packages\\pymysql\\connections.py:516: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.connections.Connection object at 0x0000000004AF01D0>\ncommand = 3\nsql = b'update customer set cust_mobile=18811348250where cust_mobile=18811348250'\n\n    def _execute_command(self, command, sql):\n        \"\"\"\n        :raise InterfaceError: If the connection is closed.\n        :raise ValueError: If no username was specified.\n        \"\"\"\n        if not self._sock:\n>           raise err.InterfaceError(\"(0, '')\")\nE           pymysql.err.InterfaceError: (0, '')\n\nvenv\\lib\\site-packages\\pymysql\\connections.py:750: InterfaceError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <utils.pysql.PyMySQL object at 0x00000000052C19E8>, table = 'customer'\nfilter = {'cust_id': 286427653}, data = {'cust_mobile': 18811348250}\n\n    def mysqlupdate(self,table,filter,data=None):\n    \n        sql = \"update \" + table\n        setcolumn=\" set \"\n        for key in data.keys():\n            if isinstance(data[key], str):\n                value = \"'\" + str(data[key]) + \"'\"\n            else:\n                value = str(data[key])\n            setcolumn+=str(key) + \"=\" + value +\",\"\n    \n        where = \" where \"\n        for key in data.keys():\n            if isinstance(data[key], str):\n                value = \"'\" + str(data[key]) + \"'\"\n            else:\n                value = str(data[key])\n            where += str(key) + \"=\" + value + \" and \"\n    \n        sql = sql +setcolumn.strip(\",\") + where.strip(' and ')\n        try:\n            cursor = self.conn.cursor()\n            cursor.execute(sql)\n        except:\n            self.conn.ping()              #超时重连，默认300s\n            cursor = self.conn.cursor()\n>           cursor.execute(sql)\n\nutils\\pysql.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.cursors.Cursor object at 0x000000000515DA20>\nquery = 'update customer set cust_mobile=18811348250where cust_mobile=18811348250'\nargs = None\n\n    def execute(self, query, args=None):\n        \"\"\"Execute a query\n    \n        :param str query: Query to execute.\n    \n        :param args: parameters used with query. (optional)\n        :type args: tuple, list or dict\n    \n        :return: Number of affected rows\n        :rtype: int\n    \n        If args is a list or tuple, %s can be used as a placeholder in the query.\n        If args is a dict, %(name)s can be used as a placeholder in the query.\n        \"\"\"\n        while self.nextset():\n            pass\n    \n        query = self.mogrify(query, args)\n    \n>       result = self._query(query)\n\nvenv\\lib\\site-packages\\pymysql\\cursors.py:170: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.cursors.Cursor object at 0x000000000515DA20>\nq = 'update customer set cust_mobile=18811348250where cust_mobile=18811348250'\n\n    def _query(self, q):\n        conn = self._get_db()\n        self._last_executed = q\n        self._clear_result()\n>       conn.query(q)\n\nvenv\\lib\\site-packages\\pymysql\\cursors.py:328: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.connections.Connection object at 0x0000000004AF01D0>\nsql = b'update customer set cust_mobile=18811348250where cust_mobile=18811348250'\nunbuffered = False\n\n    def query(self, sql, unbuffered=False):\n        # if DEBUG:\n        #     print(\"DEBUG: sending query:\", sql)\n        if isinstance(sql, text_type) and not (JYTHON or IRONPYTHON):\n            if PY2:\n                sql = sql.encode(self.encoding)\n            else:\n                sql = sql.encode(self.encoding, 'surrogateescape')\n        self._execute_command(COMMAND.COM_QUERY, sql)\n>       self._affected_rows = self._read_query_result(unbuffered=unbuffered)\n\nvenv\\lib\\site-packages\\pymysql\\connections.py:517: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.connections.Connection object at 0x0000000004AF01D0>\nunbuffered = False\n\n    def _read_query_result(self, unbuffered=False):\n        self._result = None\n        if unbuffered:\n            try:\n                result = MySQLResult(self)\n                result.init_unbuffered_query()\n            except:\n                result.unbuffered_active = False\n                result.connection = None\n                raise\n        else:\n            result = MySQLResult(self)\n>           result.read()\n\nvenv\\lib\\site-packages\\pymysql\\connections.py:732: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.connections.MySQLResult object at 0x00000000052C18D0>\n\n    def read(self):\n        try:\n>           first_packet = self.connection._read_packet()\n\nvenv\\lib\\site-packages\\pymysql\\connections.py:1075: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.connections.Connection object at 0x0000000004AF01D0>\npacket_type = <class 'pymysql.protocol.MysqlPacket'>\n\n    def _read_packet(self, packet_type=MysqlPacket):\n        \"\"\"Read an entire \"mysql packet\" in its entirety from the network\n        and return a MysqlPacket type that represents the results.\n    \n        :raise OperationalError: If the connection to the MySQL server is lost.\n        :raise InternalError: If the packet sequence number is wrong.\n        \"\"\"\n        buff = b''\n        while True:\n            packet_header = self._read_bytes(4)\n            #if DEBUG: dump_packet(packet_header)\n    \n            btrl, btrh, packet_number = struct.unpack('<HBB', packet_header)\n            bytes_to_read = btrl + (btrh << 16)\n            if packet_number != self._next_seq_id:\n                self._force_close()\n                if packet_number == 0:\n                    # MariaDB sends error packet with seqno==0 when shutdown\n                    raise err.OperationalError(\n                        CR.CR_SERVER_LOST,\n                        \"Lost connection to MySQL server during query\")\n                raise err.InternalError(\n                    \"Packet sequence number wrong - got %d expected %d\"\n                    % (packet_number, self._next_seq_id))\n            self._next_seq_id = (self._next_seq_id + 1) % 256\n    \n            recv_data = self._read_bytes(bytes_to_read)\n            if DEBUG: dump_packet(recv_data)\n            buff += recv_data\n            # https://dev.mysql.com/doc/internals/en/sending-more-than-16mbyte.html\n            if bytes_to_read == 0xffffff:\n                continue\n            if bytes_to_read < MAX_PACKET_LEN:\n                break\n    \n        packet = packet_type(buff, self.encoding)\n>       packet.check_error()\n\nvenv\\lib\\site-packages\\pymysql\\connections.py:684: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pymysql.protocol.MysqlPacket object at 0x00000000052C1710>\n\n    def check_error(self):\n        if self.is_error_packet():\n            self.rewind()\n            self.advance(1)  # field_count == error (we already know that)\n            errno = self.read_uint16()\n            if DEBUG: print(\"errno =\", errno)\n>           err.raise_mysql_exception(self._data)\n\nvenv\\lib\\site-packages\\pymysql\\protocol.py:220: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndata = b\"\\xffQ\\x04#HY000You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'cust_mobile=18811348250' at line 1\"\n\n    def raise_mysql_exception(data):\n        errno = struct.unpack('<h', data[1:3])[0]\n        is_41 = data[3:4] == b\"#\"\n        if is_41:\n            # client protocol 4.1\n            errval = data[9:].decode('utf-8', 'replace')\n        else:\n            errval = data[3:].decode('utf-8', 'replace')\n        errorclass = error_map.get(errno, InternalError)\n>       raise errorclass(errno, errval)\nE       pymysql.err.InternalError: (1105, \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'cust_mobile=18811348250' at line 1\")\n\nvenv\\lib\\site-packages\\pymysql\\err.py:109: InternalError\n\nDuring handling of the above exception, another exception occurred:\n\n    def teardown_module():\n        '''用例结果数据销毁'''\n    \n        #改回原来数据库的值\n>       PyMySQL().mysqlupdate('customer',{'cust_id':Change_MobilePhone.initparams['custid']},{'cust_mobile':Change_MobilePhone.initparams['mobile_phone']})\n\ntestcase\\Loginapi\\Change_MobilePhone_test.py:102: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\pysql.py:78: in mysqlupdate\n    self.conn.commit()\nvenv\\lib\\site-packages\\pymysql\\connections.py:420: in commit\n    self._read_ok_packet()\nvenv\\lib\\site-packages\\pymysql\\connections.py:394: in _read_ok_packet\n    pkt = self._read_packet()\nvenv\\lib\\site-packages\\pymysql\\connections.py:684: in _read_packet\n    packet.check_error()\nvenv\\lib\\site-packages\\pymysql\\protocol.py:220: in check_error\n    err.raise_mysql_exception(self._data)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndata = b'\\xff\\xeb\\x03#HY000Transaction error, need to rollback.'\n\n    def raise_mysql_exception(data):\n        errno = struct.unpack('<h', data[1:3])[0]\n        is_41 = data[3:4] == b\"#\"\n        if is_41:\n            # client protocol 4.1\n            errval = data[9:].decode('utf-8', 'replace')\n        else:\n            errval = data[3:].decode('utf-8', 'replace')\n        errorclass = error_map.get(errno, InternalError)\n>       raise errorclass(errno, errval)\nE       pymysql.err.InternalError: (1003, 'Transaction error, need to rollback.')\n\nvenv\\lib\\site-packages\\pymysql\\err.py:109: InternalError"}, "parameters": [{"name": "pyfixture", "value": "({'custid': 286427653, 'mobile_phone': 18811451515, 'type': 7, 'clientIP': '192.168.10.23', 'isFrontendCall': 'no', 'operatorName': 'auto_tester', 'appkey': 1000, 'unionId': '', 'openId': ''}, ('0', '请求成功'))"}], "start": 1618903880258, "stop": 1618903880384, "uuid": "d436b58f-3c20-4883-99b3-449692e667cf", "historyId": "d44ad821f49f59f171003baec1420f5a", "testCaseId": "01cd1c9cbfa31c446f380425e509edb1", "fullName": "testcase.Loginapi.Change_MobilePhone_test#test_ChangeMobilePhone", "labels": [{"name": "tag", "value": "change_mobilephone"}, {"name": "tag", "value": "flaky(reruns=1, reruns_delay=10)"}, {"name": "parentSuite", "value": "testcase.Loginapi"}, {"name": "suite", "value": "Change_MobilePhone_test"}, {"name": "host", "value": "A06P-A90F12DAA"}, {"name": "thread", "value": "5468-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.Loginapi.Change_MobilePhone_test"}]}