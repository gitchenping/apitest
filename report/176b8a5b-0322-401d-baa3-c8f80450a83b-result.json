{"name": "test_Get_USERINFO_by_EmailNICKNAME[myfixture0]", "status": "broken", "statusDetails": {"message": "ValueError: not enough values to unpack (expected 2, got 1)", "trace": "myfixture = [({'username': '120666@qq.com'}, ('0', 'success')), ({'username': '我是代理'}, ('0', 'success'))]\n\n    @pytest.mark.get_user_info_by_email_or_nickname\n    @pytest.mark.flaky(reruns=1,reruns_delay=10)\n    def test_Get_USERINFO_by_EmailNICKNAME(myfixture):\n    \n        #请求\n        url=Get_USERINFO_by_EmailNICKNAME.url\n        data=myfixture[0]\n        # print(data)\n>       res=request(url=url,data=data)\n\ntestcase\\Loginapi\\Get_Userinfo_by_Email_or_Nickname_test.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\requesttool.py:15: in request\n    res = requests.get(url, params=data, cookies=cookies)\nvenv\\lib\\site-packages\\requests\\api.py:76: in get\n    return request('get', url, params=params, **kwargs)\nvenv\\lib\\site-packages\\requests\\api.py:61: in request\n    return session.request(method=method, url=url, **kwargs)\nvenv\\lib\\site-packages\\requests\\sessions.py:516: in request\n    prep = self.prepare_request(req)\nvenv\\lib\\site-packages\\requests\\sessions.py:459: in prepare_request\n    hooks=merge_hooks(request.hooks, self.hooks),\nvenv\\lib\\site-packages\\requests\\models.py:314: in prepare\n    self.prepare_url(url, params)\nvenv\\lib\\site-packages\\requests\\models.py:432: in prepare_url\n    enc_params = self._encode_params(params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndata = ({'username': '120666@qq.com'}, ('0', 'success'))\n\n    @staticmethod\n    def _encode_params(data):\n        \"\"\"Encode parameters in a piece of data.\n    \n        Will successfully encode parameters when passed as a dict or a list of\n        2-tuples. Order is retained if data is a list of 2-tuples but arbitrary\n        if parameters are supplied as a dict.\n        \"\"\"\n    \n        if isinstance(data, (str, bytes)):\n            return data\n        elif hasattr(data, 'read'):\n            return data\n        elif hasattr(data, '__iter__'):\n            result = []\n>           for k, vs in to_key_val_list(data):\nE           ValueError: not enough values to unpack (expected 2, got 1)\n\nvenv\\lib\\site-packages\\requests\\models.py:97: ValueError"}, "parameters": [{"name": "myfixture", "value": "[({'username': '120666@qq.com'}, ('0', 'success')), ({'username': '我是代理'}, ('0', 'success'))]"}], "start": 1619170133831, "stop": 1619170133831, "uuid": "ac6dfe1b-28e2-40d1-a58e-b5185a927bf9", "historyId": "5187920b9fda63ebdac5a3d78cad3b8a", "testCaseId": "747bdb0f808372f065f3b9889bcd0582", "fullName": "testcase.Loginapi.Get_Userinfo_by_Email_or_Nickname_test#test_Get_USERINFO_by_EmailNICKNAME", "labels": [{"name": "tag", "value": "flaky(reruns=1, reruns_delay=10)"}, {"name": "tag", "value": "get_user_info_by_email_or_nickname"}, {"name": "parentSuite", "value": "testcase.Loginapi"}, {"name": "suite", "value": "Get_Userinfo_by_Email_or_Nickname_test"}, {"name": "host", "value": "A06P-A90F12DAA"}, {"name": "thread", "value": "7148-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.Loginapi.Get_Userinfo_by_Email_or_Nickname_test"}]}